from tkinter import *
from random import randrange
from random import randint

haut = 40 # hauteur du tableau
larg = 40  # largeur du tableau
cote = 15  # côté d'une cellule

flag = 0
terrain = 0
arrivée = 1
rover = 2
casetest = 4
marqué = 5
marqué_visité = 6


cell = [[terrain for row in range(haut)] for col in range(larg)]
etat = [[terrain for row in range(haut)] for col in range(larg)]
temp = [[terrain for row in range(haut)] for col in range(larg)]
mur  = [[0 for row in range(haut)] for col in range(larg)]
test = [[terrain for row in range(haut)] for col in range(larg)]
Deja_vu = [[False for i in range(40)] for j in range(40)]
Matrice_des_chemins = [[[] for i in range(40)] for j in range(40)]
Matrice_des_branches = [[(0, 0) for i in range(40)] for j in range(40)]
L = [[0 for i in range(40)] for j in range(40)]


#calculer et dessiner le prochain tableau 
def tableau():
    global flag
    calculer_pledge()
    dessiner()
    if flag == 1:
        fenetre.after(300, tableau)
    else:
        flag = 0
        
# Données initiales
def init():
    for y in range(haut):
        for x in range(larg):
            etat [x][y] = terrain
            temp [x][y] = terrain
            cell [x][y] = canvas.create_rectangle((x*cote, y*cote,(x+0.5)*cote, (y+0.5)*cote), outline="gray", fill="white")
    bordures()

def bordures():
    for x in range(larg):
        etat[x][0] = infranchissable
        etat[x][39] = infranchissable
    for y in range(haut):
        etat[0][y] = infranchissable
        etat[39][y] = infranchissable
    dessiner()

        
def trouverpositionarrivee():
    L = [1, 0]
    for y in range(haut):
        for x in range(larg):
            if etat[x][y] == arrivée :
                a = x 
                b = y 
                L[0] = a
                L[1] = y
    return L
            

#Appliquer les  règles
def calculer():
    L = trouverpositionrover()
    M = trouverpositionarrivee()
    u = L[0]
    v = L[1]
    for y in range(haut):
        for x in range(larg):
            if etat[x][y] == rover:
                temp[x + 1][y] = rover
                temp[x][y] = terrain
    for y in range(haut):
        for x in range(larg):
            etat[x][y] = temp[x][y]

def dessiner():
    for y in range(haut):
        for x in range(larg):
                if mur[x][y] == None :
                 canvas.itemconfig(cell[x][y], fill = "red")
                if etat[x][y] == rover:    
                    coul = "gold"
                    canvas.itemconfig(cell[x][y], fill=coul)
                if etat[x][y] == terrain:    
                    coul = "white"
                    canvas.itemconfig(cell[x][y], fill=coul)
                if etat[x][y] == marqué :
                    coul = "white"
                    canvas.itemconfig(cell[x][y], fill = coul)
                if etat[x][y] == marqué_visité:
                    coul = "white"
                    canvas.itemconfig(cell[x][y], fill=coul)

def calculer_pledge():
    for y in range(haut):
            for x in range(larg):
                if etat[x][y] == rover :
                    if mur[x][y] == 0:
                        print(mur[x][y])
                        temp[x + 1][y] = rover
                        temp[x][y] = terrain
                    if mur[x][y] == 1:
                        print(mur[x][y])
                        temp[x + 1][y] = rover
                        temp[x][y] = terrain
                    if mur[x][y] == 2:
                        print(mur[x][y])
                        temp[x][y + 1] = rover
                        temp[x][y] = terrain
                    if mur[x][y] == 3:
                        print(mur[x][y])
                        temp[x + 1][y] = rover
                        temp[x][y] = terrain
                    if mur[x][y] == 4:
                        print(mur[x][y])
                        temp[x + 1][y] = rover
                        temp[x][y] = terrain
                    if mur[x][y] == 5:
                        print(mur[x][y])
                        temp[x][y + 1] = rover
                        temp[x][y] = terrain
                    if mur[x][y] == 6:
                        print(mur[x][y])
                        temp[x + 1][y] = rover
                        temp[x][y] = terrain
                    if mur[x][y] == 7:
                        print(mur[x][y])
                        temp[x + 1][y] = rover
                        temp[x][y] = terrain
                    if mur[x][y] == 8:
                        print(mur[x][y])
                        temp[x + 1][y] = rover
                        temp[x][y] = terrain
                    if mur[x][y] == 9:
                        print(mur[x][y])
                        temp[x - 1][y] = rover
                        temp[x][y] = terrain
                    if mur[x][y] == 10:
                        print(mur[x][y])
                        temp[x][y -1] = rover
                        temp[x][y] = terrain
                    if mur[x][y] == 11:
                        print(mur[x][y])
                        temp[x - 1][y] = rover
                        temp[x][y] = terrain
                    if mur[x][y] == 12:
                        print(mur[x][y])
                        temp[x][y - 1] = rover
                        temp[x][y] = terrain
                    if mur[x][y] == 13:
                        print(mur[x][y])
                        temp[x - 1][y] = rover
                        temp[x][y] = terrain
                    if mur[x][y] == 14:
                        print(mur[x][y])
                        temp[x + 1][y] = rover
                        temp[x][y] = terrain
    for y in range(haut):
        for x in range(larg):
            etat[x][y] = temp[x][y]


#  
def pointeur(event):
    x, y = event.x//cote, event.y//cote
    print(mur[x][y])
    etat[x][y] = (etat[x][y]+1)%3  # on passe d'un état à l'autre
    temp[x][y] = (temp[x][y]+1)%5
    if etat[x][y]== 0:    
        coul = "white"
        canvas.itemconfig(cell[x][y], fill = coul)
    if etat[x][y]== 1:                
        coul = "black"
        canvas.itemconfig(cell[x][y], fill = coul)  
    if etat[x][y]== 2:
        coul = "gold"
        canvas.itemconfig(cell[x][y], fill = coul)
 

#demmarage
def demarrer():
    global flag
    if flag==0: 
        flag=1
    tableau()
#pause
def pause():
    global flag 
    flag = 0

#RAZ
def Effacer():
    init()
    tableau()
    
#___________________________
#___________________________
#___________________________
#___________________________
#___________________________

#Ici, on implémente l'algorithme de Kruskal. A partir de notre grille, on se donne un graphe "grille", et, donc, on en fait la liste de ses arretes. Puis, on met en place la sutructure union_find, et on suit l'algorithme dans le programme kruskral_maze

#renvoie la liste des arretes de notre grille, le chiffre 40 est la taille de la grille
def uf_liste_arretes():
    L = []
    for i in range(0, 40 * 40 - 1):
        if i%40!=39: L.append((i,i+1))
        if i//40!=39: L.append((i,i+40))
    return L
        
def uf_liste_arretesbon():
    L = []
    for j in range(1561, 1599):
        L.append((j, j - 40))
    for j in range(1, 39):
        L.append((j, j + 40))
    for j in range(1, 39):
        L.append((40 * j, 40 * j + 1))
        L.append((40 * j + 38, 40 * j + 39))
    for j in range(41, 1521):
        if (j- 1) % 40 != 0 :
            L.append((j, j + 1))
    return L
        
def uf_liste_arretesbon():
    L = []
    for j in range(1561, 1599):
        L.append((j, j - 40))
    for j in range(1, 39):
        L.append((j, j + 40))
    for j in range(1, 39):
        L.append((40 * j, 40 * j + 1))
        L.append((40 * j + 38, 40 * j + 39))
    for i in range(41, 1559):
        if not ((i % 40 == 0) or (i % 40 == 1) or (i % 40 == 38) or (i % 40 == 39)):
            L.append((i - 1, i))
    return L
        

#renvoie le tableau lien, tq L[i] envoie sur le repsentant de la classe, c'est à dire lui meme puisque chaque élement est sa classe au début.
def uf_class():
    L = []
    for i in range(0, 40 * 40):
        L.append(i)
    return L

#on représente les classes d'équivalences par des listes, dont l'indice es t
    
    
#renvoie le représentant de la classe d'équivalence, en récursif
def uf_find(L, j):
    k = L[j]
    if L[k] == k:
        return k
    else:
        uf_find(L, k)

#ici, on renvoie en plus le rang, on apelle toujours cette fonction avec p = 0)
def uf_find2(L, j, p):
    k = L[j]
    if k == j :
        return (j, 0)
    else:
        if L[k] == k:
            return (k, p + 1)
        else:
            return uf_find2(L, k, p + 1)

#renvoie le rang de la classe d'équivalence
def uf_rang(L):
    n = len(L)
    M = []
    for i in range(0, n):
        M.append(0)
    for i in range(0, n):
        (k, p) = uf_find2(L, i, 0)
        M[k] = max(p, M[k])
    return M
    
#la fonctio non_est_dans renvoie false si le couple (a, b) est dans L

def non_est_dans (L, a, b):
    x = True
    for i in range(len(L)):
        x = x and ((a, b) != L[i])
    return x


#fais l'union de 2 classes d'équivalences, prend en argument un tableau Lien, et le tableau des rangs et 2 elements dont on va fusionner les classes. On presuppose que u et v sont bien les représentants renvoyés à l'aide de uf_find.

def uf_union(L, M, u, v):
    if M[u] < M[v]:
        L[u] = v
    elif M[u] == M[v] :
        L[v] = u 
        M[u] += 1
    else : 
        L[v] = u
    return L

#on fait ici l'algorithme qui va fonctionner sur l'aléatoire

def melange_knuth(L):
    n = len(L)
    for i in range(0, n):
        b = randint(0, i)
        c = L[b]
        L[b] = L[i]
        L[i] = c
    return L


def kruskral_maze():
    A = uf_liste_arretes()
    F = []
    n = len(A)
    L = uf_class()
    M = uf_rang(L)
    A = melange_knuth(A)
    labyrinthe_arreté = []
    for i in range(0, n):
            (a, b) = A[i]
        
            (u, p) = uf_find2(L, a, 0)
            (v, q) = uf_find2(L, b, 0)
            
            if u != v : 
                 #labyrinthe_arreté.append((a, b))    #ici, on a réécrit le code de uf_find.
                 if M[u] < M[v]:
                     L[u] = v
                 elif M[u] == M[v]:
                     L[v] = u 
                     M[u] += 1
                 else : 
                     L[v] = u
            else:
                labyrinthe_arreté.append((a, b))
    return labyrinthe_arreté
    

#une fois que kruksral_maze nous renvoie notre labyrinthe aléatoire, il faut ensuite recreeer le labyrinthe


def maj_murgauche(p):  #on rajoute un mur à  droite, la case est à gauche
    if p == 0:
        return 2
    if p == 1:
        return 5
    if p == 2:
        return 2
    if p == 3:
        return 10
    if p == 4:
        return 9
    if p == 5:
        return 5
    if p == 6:
        return 11
    if p == 7:
        return 12
    if p == 8:
        return 13
    if p == 9:
        return 9
    if p == 10:
        return 10
    if p == 11:
        return 11
    if p == 12:
        return 12
    if p == 13:
        return 13
    if p == 14:
        return 15
    if p == 15:
        return 15

def maj_murdroit(p):  #on rajoute un mur à gauche, la case est à droite
    if p == 0:
        return 1
    if p == 1:
        return 1
    if p == 2:
        return 5
    if p == 3:
        return 7
    if p == 4:
        return 6
    if p == 5:
        return 5
    if p == 6:
        return 6
    if p == 7:
        return 7
    if p == 8:
        return 14
    if p == 9:
        return 11
    if p == 10:
        return 12
    if p == 11:
        return 11
    if p == 12:
        return 12
    if p == 13:
        return 14
    if p == 14:
        return 15
    if p == 15:
        return 15

def maj_murhaut(p): #on rajoute un mur en bas, la case est en haut
    if p == 0:
        return 3
    if p == 1:
        return 7
    if p == 2:
        return 10
    if p == 3:
        return 3
    if p == 4:
        return 8
    if p == 5:
        return 12
    if p == 6:
        return 14
    if p == 7:
        return 7
    if p == 8:
        return 8
    if p == 9:
        return 13
    if p == 10:
        return 10
    if p == 11:
        return 15
    if p == 12:
        return 12
    if p == 13:
        return 13
    if p == 14:
        return 14
    if p == 15:
        return 15

def maj_murbas(p):  #on rajoute un mur en haut, la case est en bas
    if p == 0:
        return 4
    if p == 1:
        return 6
    if p == 2:
        return 9
    if p == 3:
        return 8
    if p == 4:
        return 4
    if p == 5:
        return 11
    if p == 6:
        return 6
    if p == 7:
        return 14
    if p == 8:
        return 8
    if p == 9:
        return 9
    if p == 10:
        return 13
    if p == 11:
        return 11
    if p == 12:
        return 15
    if p == 13:
        return 13
    if p == 14:
        return 14
    if p == 15:
        return 15


    

#representation graphique
def init2():
    global mur
    for y in range(haut):
        for x in range(larg):
            etat [x][y] = terrain
            temp [x][y] = terrain
            cell [x][y] = canvas.create_rectangle((x*cote, y*cote,(x+1)*cote, (y+1)*cote), fill="white")
    Laby = kruskral_maze()
    n = len(Laby)
    for y in range(haut):
        for x in range(larg):
            etat [x][y] = terrain
            temp [x][y] = terrain
    for i in range(0, len(Laby)):
        (a, b) = Laby[i]
        x_a = a % 40
        y_a = a // 40
        x_b = b % 40
        y_b = b // 40 
        etat[x_a][y_a] = casetest
        etat[x_b][y_b] = casetest
        temp[x_b][y_a] = casetest
        temp[x_b][y_b] = casetest
        if x_a == x_b:
            canvas.create_line(x_a*cote, ((y_a+y_b)/2+1/2)*cote, (x_a+1)*cote, ((y_a+y_b)/2+1/2)*cote, width = 3)
        else:
            assert y_a == y_b
            canvas.create_line(((x_a+x_b)/2+1/2)*cote, y_a*cote, ((x_a+x_b)/2+1/2)*cote, (y_a+1)*cote, width = 3)
        #canvas.create_line(((x_a + 1)*cote,(y_a + 1)*cote,(x_b + 1)*cote, (y_b + 1)*cote), fill = "blue")
        
    for i in range(0, len(Laby)):  #il faut desormais expliquer quelles sont les cases. Pour cela, cree une bonne fois pour toute                                    
        (u, v) = Laby[i] #une grille avec la convention précédente
        a = u % 40
        qa = u // 40
        if v == u + 1: #on sait que ils sont sur la meme ligne
            mur[a][qa] = maj_murgauche(mur[a][qa])
            mur[a + 1][qa] = maj_murdroit(mur[a + 1][qa])
        else: 
            mur[a][qa] = maj_murhaut(mur[a][qa])
            mur[a][qa + 1] = maj_murbas(mur[a][qa + 1])
    for i in range(0, 40):
        mur[i][0] = maj_murbas(mur[i][0])
        mur[i][39] = maj_murhaut(mur[i][39])
        mur[0][i] = maj_murdroit(mur[0][i])
        mur[39][i] = maj_murgauche(mur[39][i])
    dessiner()

#on doit ici modifier un peu le parcours en profondeur : 
#en effet, on doit garder en mémoire, dans un tableau bidimensionnel, en position (x, y) la liste des sommets qui mene du sommet de depart à la position (x, y). Cependant, afin d'assurer ceci, on a besoin d'un second tableau bidimensionnel, qui fonctionne comme suit  : en position (x, y), il y a le sommet qui a permit d'acceder au sommet (x, y).

#Ainsi, lorsque on à affaire à une bifurcation, on sait quel sommet à cree la bifurcation, et on peut ainsi reprendre. 
#La boucle du BFS s'arreteé lorsque : on a exploré tout les sommets. 

#Matrice des chemins contient le chemin qui mene à (x, y) dans une liste, et Matrice des branches contient en position(x, y) le sommet qui a permi d'atteindre la position (x, y)
def voisin(x, y):
    p =  mur[x][y] 
    if p == 0:
        return [(x,(y - 1)),(x, (y + 1)), ((x - 1), y), ((x + 1), y)]
    if p == 1:
        return [(x,(y - 1)),(x, (y + 1)), ((x + 1), y)]
    if p == 2:
        return [(x,(y - 1)),(x, (y + 1)), ((x - 1), y)]
    if p == 3:
        return [(x, (y - 1)), ((x - 1), y), ((x + 1), y)]
    if p == 4:
        return [(x,(y + 1)),((x - 1), y), ((x + 1), y)]
    if p == 5:
        return [(x,(y - 1)),(x, (y + 1))]
    if p == 6:
        return [(x,(y + 1)), ((x + 1), y)]
    if p == 7:
        return [(x, (y - 1)), ((x + 1), y)]
    if p == 8:
        return [((x - 1), y), ((x + 1), y)]
    if p == 9:
        return [(x,(y + 1)), ((x - 1), y)]
    if p == 10:
        return [(x, (y - 1)), ((x - 1), y)]
    if p == 11:
        return [(x,(y + 1))]
    if p == 12:
        return [(x, (y - 1))]
    if p == 13:
        return [((x - 1), y)]
    if p == 14:
        return [ ((x + 1), y)]
    if p == 15:
        return []


def parcour_largeur(x, y):
    global Matrice_des_branches
    global Matrice_des_chemins
    pile_lifo = []
    if mur[x][y] == 0:
        pile_lifo.insert(0, (x - 1, y))
        Matrice_des_branches[x - 1][y] = (x, y)
        pile_lifo.insert(0, ((x + 1), y))
        Matrice_des_branches[x + 1][y] = (x, y)
        pile_lifo.insert(0, (x, (y - 1)))
        Matrice_des_branches[x][y - 1] = (x, y)
        pile_lifo.insert(0,(x, (y + 1)))
        Matrice_des_branches[x][y + 1] = (x, y)
    if mur[x][y] == 1:
        pile_lifo.insert(0, ((x + 1), y))
        Matrice_des_branches[x + 1][y] = (x, y)
        pile_lifo.insert(0, (x, (y - 1)))
        Matrice_des_branches[x][y - 1] = (x, y)
        pile_lifo.insert(0, (x, (y + 1)))
        Matrice_des_branches[x][y + 1] = (x, y)
    if mur[x][y] == 2:
        pile_lifo.insert(0, ((x - 1), y))
        Matrice_des_branches[x - 1][y] = (x, y)
        pile_lifo.insert(0, (x, (y - 1)))
        Matrice_des_branches[x][y  - 1] = (x, y)
        pile_lifo.insert(0, (x, (y + 1)))
        Matrice_des_branches[x][y + 1] = (x, y)
    if mur[x][y] == 3:
        pile_lifo.insert(0, ((x - 1), y))
        Matrice_des_branches[x - 1][y] = (x, y)
        pile_lifo.insert(0, ((x + 1), y))
        Matrice_des_branches[x + 1][y] = (x, y)
        pile_lifo.insert(0, (x, (y - 1)))  
        Matrice_des_branches[x][y - 1] = (x, y) 
    if mur[x][y] == 4:
        pile_lifo.insert(0, ((x - 1, y)))
        Matrice_des_branches[x - 1][y] = (x, y)
        pile_lifo.insert(0, ((x + 1), y))
        Matrice_des_branches[x + 1][y] = (x, y)
        pile_lifo.insert(0, (x, (y + 1)))
        Matrice_des_branches[x][y + 1] = (x, y)
    if mur[x][y] == 5:
        pile_lifo.insert(0, (x, (y - 1)))
        Matrice_des_branches[x][y - 1] = (x, y)
        pile_lifo.insert(0, (x, (y + 1)))
        Matrice_des_branches[x][y + 1] = (x, y)
    if mur[x][y] == 6:
        pile_lifo.insert(0, ((x + 1), y))
        Matrice_des_branches[x + 1][y] = (x, y)
        pile_lifo.insert(0, (x, (y + 1)))
        Matrice_des_branches[x][y + 1] = (x, y)
    if mur[x][y] == 7:
        pile_lifo.insert(0, ((x + 1), y))
        Matrice_des_branches[x + 1][y] = (x, y)
        pile_lifo.insert(0, (x, (y  - 1)))
        Matrice_des_branches[x][y - 1] = (x, y)
    if mur[x][y] == 8:
        pile_lifo.insert(0, ((x - 1), y))
        Matrice_des_branches[x - 1][y] = (x, y)
        pile_lifo.insert(0, ((x + 1), y))
        Matrice_des_branches[x + 1][y] = (x, y)
    if mur[x][y] == 9:
        pile_lifo.insert(0, ((x - 1), y))
        Matrice_des_branches[x - 1][y] = (x, y)
        pile_lifo.insert(0, (x, (y + 1)))
        Matrice_des_branches[x][y + 1] = (x, y)
    if mur[x][y] == 10:
        pile_lifo.insert(0, ((x - 1), y))
        Matrice_des_branches[x -1][y] = (x, y)
        pile_lifo.insert(0, (x, (y - 1)) )
        Matrice_des_branches[x][y - 1] = (x, y)
    if mur[x][y] == 11:
        pile_lifo.insert(0, (x, (y + 1)))
        Matrice_des_branches[x][y + 1] = (x, y)
    if mur[x][y] == 12:
        pile_lifo.insert(0, (x, (y - 1)))
        Matrice_des_branches[x][y - 1] = (x, y)
    if mur[x][y] == 13:
        pile_lifo.insert(0, ((x - 1), y))
        Matrice_des_branches[x - 1][y] = (x, y)
    if mur[x][y] == 14:
        pile_lifo.insert(0, ((x + 1), y))
        Matrice_des_branches[x + 1][y] = (x, y)
    Deja_vu[x][y] = True 
    Matrice_des_branches[x][y] = (x, y)
    Matrice_des_chemins[x][y] = [(x, y)]
    while pile_lifo != []:
        u = pile_lifo.pop()
        (x, y) = u 
        if (not Deja_vu[x][y]) : #le sommet n'a pas été vu
            Deja_vu[x][y] = True  
            (i, j) = Matrice_des_branches[x][y]
            l = (Matrice_des_chemins[i][j]).copy()
            l.append((x, y))
            Matrice_des_chemins[x][y] = l
            if mur[x][y] == 0:
                if (not Deja_vu[x - 1][y]):
                    pile_lifo.insert(0, (x - 1, y))
                    Matrice_des_branches[x - 1][y] = (x, y)
                if (not Deja_vu[x + 1][y]):    
                    pile_lifo.insert(0, ((x + 1), y))
                    Matrice_des_branches[x + 1][y] = (x, y)
                if (not Deja_vu[x][y - 1]):
                    pile_lifo.insert(0, (x, (y - 1)))
                    Matrice_des_branches[x][y - 1] = (x, y)
                if (not Deja_vu[x][y + 1]):
                    pile_lifo.insert(0,(x, (y + 1)))
                    Matrice_des_branches[x][y + 1] = (x, y)
            if mur[x][y] == 1:
                if (not Deja_vu[x + 1][y]): 
                    pile_lifo.insert(0, ((x + 1), y))
                    Matrice_des_branches[x + 1][y] = (x, y)
                if (not Deja_vu[x][y - 1]): 
                    pile_lifo.insert(0, (x, (y - 1)))
                    Matrice_des_branches[x][y - 1] = (x, y)
                if (not Deja_vu[x][y + 1]): 
                    pile_lifo.insert(0, (x, (y + 1)))
                    Matrice_des_branches[x][y + 1] = (x, y)
            if mur[x][y] == 2:
                if (not Deja_vu[x  - 1][y]): 
                    pile_lifo.insert(0, ((x - 1), y))
                    Matrice_des_branches[x - 1][y] = (x, y)
                if (not Deja_vu[x][y - 1]): 
                    pile_lifo.insert(0, (x, (y - 1)))
                    Matrice_des_branches[x][y  - 1] = (x, y)
                if (not Deja_vu[x][y + 1]): 
                    pile_lifo.insert(0, (x, (y + 1)))
                    Matrice_des_branches[x][y + 1] = (x, y)
            if mur[x][y] == 3:
                if (not Deja_vu[x  - 1][y]): 
                    pile_lifo.insert(0, ((x - 1), y))
                    Matrice_des_branches[x - 1][y] = (x, y)
                if (not Deja_vu[x + 1][y]): 
                    pile_lifo.insert(0, ((x + 1), y))
                    Matrice_des_branches[x + 1][y] = (x, y)
                if (not Deja_vu[x][y - 1]): 
                    pile_lifo.insert(0, (x, (y - 1)))  
                    Matrice_des_branches[x][y - 1] = (x, y) 
            if mur[x][y] == 4:
                if (not Deja_vu[x  - 1][y]): 
                    pile_lifo.insert(0, ((x - 1, y)))
                    Matrice_des_branches[x - 1][y] = (x, y)
                if (not Deja_vu[x + 1][y]): 
                    pile_lifo.insert(0, ((x + 1), y))
                    Matrice_des_branches[x + 1][y] = (x, y)
                if (not Deja_vu[x][y + 1]): 
                    pile_lifo.insert(0, (x, (y + 1)))
                    Matrice_des_branches[x][y + 1] = (x, y)
            if mur[x][y] == 5:
                if (not Deja_vu[x][y - 1]): 
                    pile_lifo.insert(0, (x, (y - 1)))
                    Matrice_des_branches[x][y - 1] = (x, y)
                if (not Deja_vu[x][y + 1]): 
                    pile_lifo.insert(0, (x, (y + 1)))
                    Matrice_des_branches[x][y + 1] = (x, y)
            if mur[x][y] == 6:
                if (not Deja_vu[x + 1][y]): 
                    pile_lifo.insert(0, ((x + 1), y))
                    Matrice_des_branches[x + 1][y] = (x, y)
                if (not Deja_vu[x][y + 1]): 
                    pile_lifo.insert(0, (x, (y + 1)))
                    Matrice_des_branches[x][y + 1] = (x, y)
            if mur[x][y] == 7:
                if (not Deja_vu[x + 1][y]): 
                    pile_lifo.insert(0, ((x + 1), y))
                    Matrice_des_branches[x + 1][y] = (x, y)
                if (not Deja_vu[x][y - 1]): 
                    pile_lifo.insert(0, (x, (y  - 1)))
                    Matrice_des_branches[x][y - 1] = (x, y)
            if mur[x][y] == 8:
                if (not Deja_vu[x - 1][y]): 
                    pile_lifo.insert(0, ((x - 1), y))
                    Matrice_des_branches[x - 1][y] = (x, y)
                if (not Deja_vu[x + 1][y]): 
                    pile_lifo.insert(0, ((x + 1), y))
                    Matrice_des_branches[x + 1][y] = (x, y)
            if mur[x][y] == 9:
                if (not Deja_vu[x - 1][y]): 
                    pile_lifo.insert(0, ((x - 1), y))
                    Matrice_des_branches[x - 1][y] = (x, y)
                if (not Deja_vu[x][y + 1]): 
                    pile_lifo.insert(0, (x, (y + 1)))
                    Matrice_des_branches[x][y + 1] = (x, y)
            if mur[x][y] == 10:
                if (not Deja_vu[x - 1][y]): 
                    pile_lifo.insert(0, ((x - 1), y))
                    Matrice_des_branches[x - 1][y] = (x, y)
                if (not Deja_vu[x][y - 1]): 
                    pile_lifo.insert(0, (x, (y - 1)) )
                    Matrice_des_branches[x][y - 1] = (x, y)
            if mur[x][y] == 11:
                if (not Deja_vu[x][y + 1]): 
                    pile_lifo.insert(0, (x, (y + 1)))
                    Matrice_des_branches[x][y + 1] = (x, y)
            if mur[x][y] == 12:
                if (not Deja_vu[x][y - 1]): 
                    pile_lifo.insert(0, (x, (y - 1)))
                    Matrice_des_branches[x][y - 1] = (x, y)
            if mur[x][y] == 13:
                if (not Deja_vu[x - 1][y]): 
                    pile_lifo.insert(0, ((x - 1), y))
                    Matrice_des_branches[x - 1][y] = (x, y)
            if mur[x][y] == 14:
                if (not Deja_vu[x + 1][y]): 
                    pile_lifo.insert(0, ((x + 1), y))
                    Matrice_des_branches[x + 1][y] = (x, y)

def calculer_bis():
    (u, v) = (1000, 1000)
    for y in range(haut):
            for x in range(larg):
                if etat[x][y] ==rover :
                    parcour_largeur(x, y)
                    (u, v) = (x, y)
                    print(u, v)
    for y in range(haut):
        for x in range(larg):
            if etat[x][y] == arrivée:
                (p, q) = (x, y)
                l = Matrice_des_chemins[x][y].copy()
                print(l)
                for i in range(1, len(l) - 1):
                    w = l[i]
                    (xa, ya) = w
                    temp[xa][ya] = marqué
                    L[ya][xa] = i 
                    print(L[ya][xa])
    temp[u][v] =rover
    temp[p][q] = arrivée 
    for z in range(haut):
        for t in range(larg):
            etat[z][t] = temp[z][t]
    dessiner()
    

    
def resolutionlineaire():
    global flag
    if flag==0: 
        flag=1
    pathfollowing()

def pathfollowing():
    global flag
    calculerpath()
    dessiner()
    if flag == 1:
        fenetre.after(300, pathfollowing)
    else:
        flag = 0
  
def nombre_voisin_marque(x, y):
    a = 0
    if (x < 39) and etat[x + 1][y] == marqué:
        a += 1
    if (x > 0) and etat[x - 1][y] == marqué:
        a += 1
    if (y < 39) and etat[x][y + 1] == marqué:
        a += 1
    if (y > 0) and etat[x][y - 1] == marqué:
        a += 1
    return a

def vrai_suivant(x, y):
    a = nombre_voisin_marque(x, y)
    print(a)
    (xcourant, ycourant) = (0, 0)
    if a == 1:
        if (x < 39) and etat[x + 1][y] == marqué:
            return(x + 1, y)
        if (x > 0) and etat[x - 1][y] == marqué:
            return (x - 1, y)
        if (y < 39) and etat[x][y + 1] == marqué:
            return(x, y + 1)
        if (y > 0) and etat[x][y - 1] == marqué:
            return(x, y - 1)
    if a >= 2:
        p = 1600
        if (x < 39) and etat[x + 1][y] == marqué:
            print(L[y][x + 1])
            if p > L[y][x + 1]:
                p = L[y][x + 1]
                (xcourant, ycourant) = (x + 1, y)
        if (x > 0) and etat[x - 1][y] == marqué:
            print(L[y][x - 1])
            if p > L[y][x - 1]:
                p = L[y][x - 1]
                (xcourant, ycourant) = (x - 1, y)
        if (y < 39) and etat[x][y + 1] == marqué:
            print(L[y + 1][x])
            if p > L[y + 1][x]:
                p = L[y + 1][x]
                (xcourant, ycourant) = (x, y + 1)
        if (y > 0) and etat[x][y - 1] == marqué:
            print(L[y - 1][x])
            if p > L[y - 1][x]:
                p = L[x - 1][y]
                (xcourant, ycourant) = (x, y - 1)
    return (xcourant, ycourant)
                

def calculerpath():
    for y in range(haut):
       for x in range(larg):
            if etat[x][y] == rover:
                (p, q) =  vrai_suivant(x, y)
                print(p, q)
                temp[x][y] = marqué_visité
                temp[p][q] = rover
                
    for y in range(haut):
        for x in range(larg):
            etat[x][y] = temp[x][y]
                
 
     



fenetre = Tk()
fenetre.title("TIPE rover mars")
canvas = Canvas(fenetre, width=cote*larg,  height = cote*haut) 



#boutons de commande
canvas.pack()
bouton1 = Button(fenetre, text = "fermer l'automate", command=fenetre.destroy)
bouton1.pack(side = LEFT)
bouton2 = Button(fenetre, text = "demmarrer", command=demarrer)
bouton2.pack(side = LEFT)
bouton4 = Button(fenetre, text = "pause", command=pause)
bouton4.pack(side = LEFT)
bouton4 = Button(fenetre, text = "generate maze", command=bordures)
bouton4.pack(side = LEFT)
bouton5 = Button(fenetre, text = "matrice des chemins", command = calculer_bis)
bouton5.pack(side = RIGHT)
bouton6 = Button(fenetre, text = "aller à l'objectif'", command = resolutionlineaire)
bouton6.pack(side = RIGHT)
#Lancement du programme
canvas.bind("<Button-1>", pointeur)

init2()
tableau()
fenetre.mainloop()


##
 
 Convention : |x : le mur est à gauche
               x| : le mur est à droite
            _x : le mur est en dessous
            x_: le mur est au dessus
            
            
  
